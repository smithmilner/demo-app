name: test-build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Run Tests
        run: yarn test

      - name: Tag new version
        id: release
        run: |
          git config --global user.name "github"
          git config --global user.email "github@users.noreply.github.com"
          yarn version --patch
          VERSION=$(cat ./package.json | grep -m 1 version | sed 's/[^0-9.]//g')
          echo "::set-output name=version::$VERSION"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/smithmilner/demo/app
          tags: |
            type=semver,pattern={{version}},value=${{ steps.release.outputs.version}}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.release.outputs.version}}

      - name: Set up Docker Buildx

        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Login to github container registry
        uses: docker/login-action@v1
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push image
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          target: production
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Push release tag
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          git config pull.rebase true
          git pull
          git push --follow-tags